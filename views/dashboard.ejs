<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Your Dashboard</title>
    <%- include('partials/head') %>
    <style>
        body { font-family: 'Inter', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif; margin:0; background: var(--bg); color: var(--text); }
        .main-content { padding: 2rem; }
        .container { max-width: 1280px; margin: 0 auto; }
        .grid { display: grid; grid-template-columns: 1fr; gap: 16px; }
        @media (min-width: 900px) { .grid { grid-template-columns: 2fr 1fr; } }
        .column { display: grid; grid-auto-rows: min-content; gap: 16px; }
        .page-heading{ font-size:22px; font-weight:800; margin:0 0 12px; }

        .card{ background: var(--card); border:1px solid var(--border); border-radius:16px; box-shadow: var(--shadow); padding:24px; }
        .card h2{ font-size: 20px; margin:0 0 12px; color: var(--text); border-bottom: 1px solid var(--border); padding-bottom: 10px; }

        .status{ display:inline-block; padding:4px 10px; border-radius:999px; color:#fff; font-weight:700; font-size:12px; letter-spacing:.03em; text-transform:uppercase }
        .status.active{ background: var(--accent); }
        .status.incomplete{ background:#E53E3E }

        form{ display:flex; flex-direction:column; gap:12px }
        label{ font-weight:600; color: var(--muted) }
        input[type="text"], input[type="url"]{ padding:12px 14px; border:1px solid var(--border); border-radius:8px; font-size:14px }
        input:focus{ outline:none; border-color: var(--accent); box-shadow:0 0 0 3px rgba(16,185,129,.2) }

        .btn{ display:inline-flex; align-items:center; gap:.5rem }
        .btn-primary{ background: var(--accent); color:#fff; border:none; border-radius:8px; padding:12px 14px; font-weight:700 }
        .btn-primary:hover{ background: var(--accentHover) }
        .btn-secondary{ background:transparent; border:1px solid var(--theme-colors-button-secondaryBorder); color: var(--theme-colors-button-secondaryText); border-radius:8px; padding:10px 12px; font-weight:600 }

        .link-box{ background: var(--bg); padding: 12px; border-radius:8px; font-family:monospace; border:1px solid var(--border); width:100%; box-sizing:border-box; overflow:hidden; text-overflow:ellipsis; white-space:nowrap; display:block }

        .kpis{ display:grid; grid-template-columns: repeat(3,1fr); gap: 12px }
        .kpi{ background:#fff; border:1px solid var(--border); border-radius:12px; padding:12px; text-align:center }
        .kpi .label{ color: var(--muted); font-size:13px }
        .kpi .value{ font-size: 22px; font-weight:800; margin-top:4px }

        .sub-row{ display:flex; align-items:center; gap:12px; flex-wrap:wrap }
        .qr-placeholder{ width:128px; height:128px; border:1px solid var(--border); border-radius:8px; display:block }

        /* Subscription widget layout */
        .plan-cols{ display:grid; grid-template-columns:1fr; gap:16px; align-items:stretch }
        @media (min-width: 700px){ .plan-cols{ grid-template-columns:1fr 1fr } }
        .plan-col{ padding:16px; display:flex; flex-direction:column; border-radius:12px }
        .plan-price{ display:flex; align-items:baseline; gap:6px; margin-top:4px }
        .plan-features{ list-style:none; padding:0; margin:12px 0 0; color:var(--muted); line-height:1.9 }
        .plan-actions{ margin-top:auto }
        /* Center the main subscription card */
        .subscription-wrap{ display:flex; justify-content:center; padding-top:48px }
        /* Notice banner */
        .notice-banner{ background:#EBF9F3; color:#065F46; padding:12px 16px; border-radius:8px; font-weight:600; display:flex; align-items:center; gap:8px }
        .btn-disabled{ background:#F3F4F6; color:#9CA3AF; cursor:not-allowed; border:none; border-radius:8px; padding:10px 12px; font-weight:700 }

        .table-wrap{ overflow:auto; border:1px solid var(--theme-colors-border-table); border-radius:12px }
        table{ width:100%; border-collapse:collapse }
        thead th{ position:sticky; top:0; z-index:1; background:#fff; font-size:12px; text-transform:uppercase; letter-spacing:.05em; color: var(--muted); border-bottom:1px solid var(--theme-colors-border-table); padding:16px }
        tbody tr{ border-bottom:1px solid var(--theme-colors-border-table) }
        tbody tr:hover{ background: var(--theme-colors-background-rowHover) }
        td{ padding:16px; vertical-align:top }
        .rating-star{ color:#FBBF24; font-weight:700 }

        /* Cancel modal */
        .modal-overlay{ position:fixed; inset:0; background:rgba(0,0,0,.35); display:none; align-items:center; justify-content:center; z-index:50 }
        .modal{ background: var(--card); border:1px solid var(--border); border-radius:16px; box-shadow: var(--shadow); max-width:520px; width:92%; padding:24px }
        .modal h3{ margin:0 0 8px; font-size:18px }
        .modal p{ margin:0 0 16px; color: var(--muted) }
        .modal-actions{ display:flex; gap:8px; justify-content:flex-end }
        .btn-danger{ background:#FDECEC; color:#B91C1C; border:1px solid #F2B8B5; border-radius:8px; padding:10px 12px; font-weight:700 }
        .btn-ghost{ background:transparent; color: var(--muted); border:1px solid var(--border); border-radius:8px; padding:10px 12px; font-weight:600 }
        /* Anchor focus */
        #settings-link{ scroll-margin-top: 88px }
        .anchor-pulse{ animation: anchorPulse 1.2s ease-in-out 2; box-shadow: 0 0 0 4px rgba(16,185,129,.35), 0 0 0 10px rgba(16,185,129,.12) }
        @keyframes anchorPulse{ 0%{ box-shadow: 0 0 0 0 rgba(16,185,129,0) } 40%{ box-shadow: 0 0 0 8px rgba(16,185,129,.35) } 70%{ box-shadow: 0 0 0 3px rgba(16,185,129,.18) } 100%{ box-shadow: 0 0 0 0 rgba(16,185,129,0) } }
        /* Settings highlight animation */
        .is-highlighted{ animation: settingsHighlight 2.5s ease-in-out 1; }
        @keyframes settingsHighlight{
          0% { background:#e8f5e9; }
          40% { background:#e8f5e9; }
          100% { background: var(--card); }
        }
        
        /* Trial tour modal styling */
        .tour-step{ transition: opacity 0.3s ease; }
        .tour-step[style*="display: none"]{ opacity: 0; }
        .tour-step[style*="display: block"]{ opacity: 1; }
        
        /* Trial progress animations */
        .trial-progress-enter{ animation: progressSlide 0.5s ease-out; }
        @keyframes progressSlide{
          from{ transform: translateX(-100%); opacity: 0; }
          to{ transform: translateX(0); opacity: 1; }
        }
        /* Business name badge */
        .name-badge{ display:inline-flex; align-items:center; gap:8px; padding:6px 10px; border:1px solid var(--border); border-radius:999px; background: var(--bg); font-weight:700; color: var(--text); margin: -6px 0 12px 0 }
        .name-badge .dot{ width:8px; height:8px; background: var(--accent); border-radius:50% }
        /* Aesthetic inline help link next to Place ID label */
        .help-chip{ display:inline-flex; align-items:center; gap:6px; padding:6px 10px; border:1px solid var(--border); border-radius:999px; font-size:12px; color: var(--muted); text-decoration:none; background: var(--bg); transition: border-color .15s ease, color .15s ease, background-color .15s ease, box-shadow .2s ease, transform .15s ease }
        .help-chip:hover{ border-color: var(--accent); color: var(--accent); background: rgba(16,185,129,.06); box-shadow: 0 0 0 3px rgba(16,185,129,.15); transform: translateY(-1px) }
        .help-chip:focus-visible{ outline:none; box-shadow: 0 0 0 3px rgba(16,185,129,.25) }
        .help-chip .g-icon{ width:14px; height:14px; display:inline-block }
        
        /* Table Sorting Styles */
        .sortable {
            transition: background-color 0.2s ease;
            position: relative;
        }
        
        .sortable:hover {
            background-color: var(--bg-secondary) !important;
        }
        
        .sort-icon {
            margin-left: 6px;
            font-size: 12px;
            opacity: 0.6;
            transition: all 0.2s ease;
        }
        
        .sortable:hover .sort-icon {
            opacity: 1;
        }
        
        .sortable[data-sort="rating"] .sort-icon,
        .sortable[data-sort="date"] .sort-icon,
        .sortable[data-sort="name"] .sort-icon,
        .sortable[data-sort="email"] .sort-icon,
        .sortable[data-sort="phone"] .sort-icon,
        .sortable[data-sort="comment"] .sort-icon {
            display: inline-block;
        }
    </style>
</head>
<body>
    <%- include('partials/header') %>

    <main class="main-content">
      <div class="container">
        <% if (typeof analytics !== 'undefined') { %>
        <h1 class="page-heading">Dashboard</h1>
        <% if (business && (business.businessName || business.googlePlaceId)) { %>
          <div class="name-badge"><span class="dot" aria-hidden="true"></span><span><%= business.businessName || ('Place ' + business.googlePlaceId.slice(0,6) + '…') %></span></div>
        <% } %>
        <div class="card base-card" style="margin-bottom:16px">
          <h2>Insights</h2>
          <% if (analytics && analytics.planTier === 'free') { %>
            <div class="notice-banner" style="margin:8px 0 12px">
              Showing last 30 days. 
              <a href="/pricing" style="color: var(--accent); text-decoration: none; font-weight: 600;">Upgrade to Pro</a> 
              for full history, filters, and exports.
            </div>
          <% } %>
          <% if (analytics && analytics.planTier === 'pro') { %>
            <form method="GET" action="/dashboard" style="margin:8px 0 0">
              <label for="range" style="font-size:12px;color:var(--muted);margin-right:8px">Date range</label>
              <select id="range" name="range" onchange="this.form.submit()" class="btn btn-secondary" style="padding:8px 10px">
                <option value="all" <%= (typeof selectedRange !== 'undefined' && selectedRange==='all') ? 'selected' : '' %>>All time</option>
                <option value="7d" <%= (typeof selectedRange !== 'undefined' && selectedRange==='7d') ? 'selected' : '' %>>Last 7 days</option>
                <option value="30d" <%= (typeof selectedRange !== 'undefined' && selectedRange==='30d') ? 'selected' : '' %>>Last 30 days</option>
                <option value="90d" <%= (typeof selectedRange !== 'undefined' && selectedRange==='90d') ? 'selected' : '' %>>Last 90 days</option>
              </select>
                </form>
            <% } %>
            <div class="kpis">
              <div class="kpi"><div class="label">Total feedback</div><div class="value"><%= analytics.total %></div></div>
              <div class="kpi"><div class="label">Average rating</div><div class="value"><%= analytics.avg %></div></div>
              <div class="kpi"><div class="label">5★ conversions</div><div class="value"><%= analytics.conversions %></div></div>
            </div>
          <div style="margin-top:1rem">
            <div id="distChart" style="display:grid;gap:6px"></div>
            <% if (analytics && analytics.planTier === 'pro') { %>
              <div style="margin-top:12px; display:flex; gap:8px; flex-wrap:wrap">
                <form action="/api/analytics/export.csv" method="GET">
                  <button type="submit" class="btn btn-secondary">Export CSV</button>
                </form>
                <form action="/api/analytics/export.pdf" method="GET">
                  <button type="submit" class="btn btn-secondary">Export PDF</button>
                </form>
              </div>
            <% } %>
          </div>
          </div>
          <% } %>
        <!-- Customer Feedback - Full Width -->
        <div class="card base-card" style="margin-bottom: 16px;">
            <h2>Customer Feedback <span id="feedbackCount" style="color:var(--muted); font-weight:600; font-size:14px">(<%= (Array.isArray(feedback) ? feedback.length : 0) %>)</span></h2>
            <div class="table-wrap" style="max-width:100%">
                <table style="min-width: 1200px">
                    <thead>
                        <tr>
                            <th class="sortable" data-sort="rating" style="cursor: pointer; user-select: none;">
                                Rating <span class="sort-icon">↕</span>
                            </th>
                            <th class="sortable" data-sort="date" style="cursor: pointer; user-select: none;">
                                Date <span class="sort-icon">↕</span>
                            </th>
                            <th class="sortable" data-sort="name" style="cursor: pointer; user-select: none;">
                                Name <span class="sort-icon">↕</span>
                            </th>
                            <th class="sortable" data-sort="email" style="cursor: pointer; user-select: none;">
                                Email <span class="sort-icon">↕</span>
                            </th>
                            <th class="sortable" data-sort="phone" style="cursor: pointer; user-select: none;">
                                Phone <span class="sort-icon">↕</span>
                            </th>
                            <th class="sortable" data-sort="comment" style="cursor: pointer; user-select: none;">
                                Comment <span class="sort-icon">↕</span>
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                <% if (feedback.length > 0) { %>
                        <% feedback.forEach(item => { %>
                            <tr>
                                <td><span class="rating-star"><%= item.rating %> ★</span></td>
                                <td><%= new Date(item.createdAt).toLocaleDateString() %></td>
                                <td><%= item.customerName || 'N/A' %></td>
                                <td><%= item.customerEmail || 'N/A' %></td>
                                <td><%= item.customerPhone || 'N/A' %></td>
                                <td><%= item.comment || 'N/A' %></td>
                            </tr>
                        <% }); %>
                <% } else { %>
                  <tr>
                    <td colspan="6" style="text-align:center; padding:32px 16px;">
                      <div style="display:flex; flex-direction:column; align-items:center; gap:14px; color: var(--muted)">
                        <svg width="88" height="88" viewBox="0 0 88 88" fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                          <rect x="7" y="18" width="74" height="50" rx="8" stroke="#E5E7EB" stroke-width="2"/>
                          <rect x="16" y="28" width="56" height="6" rx="3" fill="#E5E7EB"/>
                          <rect x="16" y="40" width="42" height="6" rx="3" fill="#E5E7EB"/>
                          <circle cx="70" cy="43" r="3" fill="#E5E7EB"/>
                        </svg>
                        <div>Your customer feedback will appear here.</div>
                        <button id="btnFirstRequestStatic" type="button" class="btn-primary">Send Your First Request</button>
                      </div>
                    </td>
                  </tr>
                <% } %>
              </tbody>
            </table>
            
            <!-- Table Sorting JavaScript -->
            <script>
                (function() {
                    console.log('[TABLE-SORT] Initializing table sorting...');
                    
                    const table = document.querySelector('.table-wrap table');
                    const tbody = table.querySelector('tbody');
                    const headers = table.querySelectorAll('th.sortable');
                    
                    if (!table || !tbody || headers.length === 0) {
                        console.error('[TABLE-SORT] Required elements not found');
                        return;
                    }
                    
                    let currentSort = { column: null, direction: 'asc' };
                    
                    // Add click event listeners to headers
                    headers.forEach(header => {
                        header.addEventListener('click', function() {
                            const column = this.dataset.sort;
                            console.log('[TABLE-SORT] Header clicked:', column);
                            
                            // Toggle sort direction if same column
                            if (currentSort.column === column) {
                                currentSort.direction = currentSort.direction === 'asc' ? 'desc' : 'asc';
                            } else {
                                currentSort.column = column;
                                currentSort.direction = 'asc';
                            }
                            
                            // Update sort icons
                            updateSortIcons();
                            
                            // Sort the table
                            sortTable(column, currentSort.direction);
                        });
                        
                        // Add hover effect
                        header.addEventListener('mouseenter', function() {
                            this.style.backgroundColor = 'var(--bg-secondary)';
                        });
                        
                        header.addEventListener('mouseleave', function() {
                            this.style.backgroundColor = '';
                        });
                    });
                    
                    function updateSortIcons() {
                        headers.forEach(header => {
                            const icon = header.querySelector('.sort-icon');
                            const column = header.dataset.sort;
                            
                            if (currentSort.column === column) {
                                icon.textContent = currentSort.direction === 'asc' ? '↑' : '↓';
                                icon.style.color = 'var(--accent)';
                                icon.style.fontWeight = 'bold';
                            } else {
                                icon.textContent = '↕';
                                icon.style.color = '';
                                icon.style.fontWeight = 'normal';
                            }
                        });
                    }
                    
                    function sortTable(column, direction) {
                        const rows = Array.from(tbody.querySelectorAll('tr'));
                        
                        if (rows.length === 0) return;
                        
                        // Sort rows
                        rows.sort((a, b) => {
                            const aValue = getCellValue(a, column);
                            const bValue = getCellValue(b, column);
                            
                            let comparison = 0;
                            
                            if (column === 'rating') {
                                // Sort by numeric rating
                                comparison = (parseInt(aValue) || 0) - (parseInt(bValue) || 0);
                            } else if (column === 'date') {
                                // Sort by date
                                comparison = new Date(aValue) - new Date(bValue);
                            } else {
                                // Sort by text (case-insensitive)
                                comparison = String(aValue).toLowerCase().localeCompare(String(bValue).toLowerCase());
                            }
                            
                            return direction === 'asc' ? comparison : -comparison;
                        });
                        
                        // Reorder rows in DOM
                        rows.forEach(row => tbody.appendChild(row));
                        
                        console.log(`[TABLE-SORT] Table sorted by ${column} (${direction})`);
                    }
                    
                    function getCellValue(row, column) {
                        const columnIndex = getColumnIndex(column);
                        if (columnIndex === -1) return '';
                        
                        const cell = row.cells[columnIndex];
                        if (!cell) return '';
                        
                        // Extract text content, handling special cases
                        let text = cell.textContent || cell.innerText || '';
                        
                        if (column === 'rating') {
                            // Extract just the number from "5 ★"
                            const match = text.match(/(\d+)/);
                            return match ? match[1] : text;
                        } else if (column === 'date') {
                            // Return the date text as-is for sorting
                            return text;
                        }
                        
                        return text.trim();
                    }
                    
                    function getColumnIndex(column) {
                        const columnMap = {
                            'rating': 0,
                            'date': 1,
                            'name': 2,
                            'email': 3,
                            'phone': 4,
                            'comment': 5
                        };
                        return columnMap[column] || -1;
                    }
                    
                    console.log('[TABLE-SORT] Table sorting initialized successfully');
                })();
            </script>
          </div>
          </div>

        <div class="grid" id="settings-link">

          <div class="column">
            <div class="card base-card" id="settingsCard">
                <h2>Settings & Rating Link</h2>
              <% if (!(business && business.googlePlaceId)) { %>
              <div id="placeIdHint" class="notice-banner" style="margin-bottom:12px">
                <span aria-hidden="true">💡</span>
                <span>Add your Google Place ID to generate your public review link and QR code for customers.</span>
              </div>
              <% } %>
                <form action="/update-settings" method="POST">
                    <input type="hidden" name="_csrf" value="<%= (typeof csrfToken !== 'undefined' ? csrfToken : '') %>">
                <div style="display:flex; align-items:center; gap:10px; flex-wrap:wrap">
                  <label for="googlePlaceId" style="margin:0">Your Google Place ID:</label>
                  <a class="help-chip" href="https://developers.google.com/maps/documentation/places/web-service/place-id#find-id" target="_blank" rel="noopener noreferrer">
                    <svg class="g-icon" viewBox="0 0 48 48" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                      <path fill="#EA4335" d="M24 9.5c3.54 0 6 1.54 7.38 2.83l5.02-4.9C33.64 4.46 29.27 3 24 3 14.91 3 7.05 8.58 3.67 16.17l5.93 4.6C11.57 15.28 17.34 9.5 24 9.5z"/>
                      <path fill="#4285F4" d="M46.5 24.5c0-1.64-.15-3.21-.43-4.72H24v9h12.68c-.55 2.96-2.24 5.46-4.76 7.14l7.29 5.66C43.93 37.78 46.5 31.61 46.5 24.5z"/>
                      <path fill="#FBBC05" d="M9.6 28.77a14.5 14.5 0 010-9.54l-5.93-4.6a23.94 23.94 0 000 18.74l5.93-4.6z"/>
                      <path fill="#34A853" d="M24 46c6.48 0 11.92-2.13 15.89-5.79l-7.29-5.66c-2.02 1.36-4.61 2.18-8.6 2.18-6.66 0-12.42-5.78-14.4-13.01l-5.93 4.6C7.05 39.42 14.91 46 24 46z"/>
                      <path fill="none" d="M0 0h48v48H0z"/>
                    </svg>
                    Find your Place ID
                  </a>
                </div>
                <input type="text" id="googlePlaceId" name="googlePlaceId" value="<%= business.googlePlaceId || '' %>" placeholder="Enter your Google Place ID here" <%= (business && business.googlePlaceId) ? 'readonly style="background:#F9FAFB;color:#6B7280"' : '' %> required>
                <% if (business && business.googlePlaceId) { %>
                  <div style="margin-top:8px">
                    <button type="button" id="btnEditPlaceId" class="btn btn-secondary">Change ID</button>
                  </div>
                <% } %>
                <% if (process.env.GOOGLE_MAPS_API_KEY) { %>
                <div id="placeIdFinderWrap" style="margin-top:10px">
                  <label for="placeSearch" style="font-weight:600; color: var(--muted)">Find your business (Google)</label>
                  <input type="text" id="placeSearch" placeholder="Type business name and address" style="padding:12px 14px; border:1px solid var(--border); border-radius:8px; font-size:14px">
                  <div id="placeSearchResult" style="font-size:12px; color: var(--muted); margin-top:6px; display:none"></div>
                </div>
                <% } %>
                <button type="submit" class="btn-primary">Save Settings</button>
                </form>
          </div>

                        <div class="card base-card">
                          <h2>Automated Sending</h2>
                          
                          <!-- COMPLETELY REBUILT - ULTRA SIMPLE APPROACH -->
                          <div style="padding: 20px; background: #f8f9fa; border-radius: 8px; margin-bottom: 20px;">
                            <h4 style="margin: 0 0 15px 0; color: #333;">Current Settings:</h4>
                            <div id="currentSettingsDisplay">
                              <p style="margin: 8px 0;"><strong>Auto-send:</strong> <span id="currentAutoSend">Loading...</span></p>
                              <p style="margin: 8px 0;"><strong>Delay:</strong> <span id="currentDelay">Loading...</span></p>
                              <p style="margin: 8px 0;"><strong>Channel:</strong> <span id="currentChannel">Loading...</span></p>
            </div>
          </div>
              
                          <!-- Simple Form -->
                          <form id="automationForm" style="margin-bottom: 20px;">
                            <div style="margin-bottom: 15px;">
                              <label style="display: flex; align-items: center; gap: 10px; cursor: pointer;">
                                <input type="checkbox" id="autoSendCheckbox" style="width: 18px; height: 18px;">
                                <span>Enable auto-send after payments</span>
                              </label>
                            </div>
                            
                            <div style="display: flex; gap: 20px; margin-bottom: 15px; flex-wrap: wrap;">
                              <div>
                                <label for="delayInput">Delay (minutes):</label><br>
                                <input type="number" id="delayInput" min="0" max="10080" value="0" 
                                       style="width: 100px; padding: 8px; border: 1px solid #ddd; border-radius: 4px;">
                              </div>
                              
                              <div>
                                <label for="channelSelect">Preferred channel:</label><br>
                                <select id="channelSelect" style="padding: 8px; border: 1px solid #ddd; border-radius: 4px;">
                                  <option value="email">Email</option>
                                  <option value="sms">SMS</option>
                                </select>
                              </div>
                            </div>
                            
                            <button type="button" id="saveButton" class="btn primary" style="display: flex; justify-content: center; align-items: center; width: 100%;">
                              Save Settings
                            </button>
                            
                            <div id="saveStatus" style="margin-top: 15px; font-weight: bold; min-height: 20px;"></div>
                          </form>
                          
                          <!-- Sync Tools -->
                          <div style="border-top: 1px solid #ddd; padding-top: 20px;">
                            <h4 style="margin: 0 0 15px 0; color: #333;">Sync Tools</h4>
                            <div style="display: flex; gap: 15px; align-items: center; flex-wrap: wrap;">
                              <label>Days to backfill:</label>
                              <input type="number" id="backfillDays" value="30" min="1" max="90" 
                                     style="width: 80px; padding: 8px; border: 1px solid #ddd; border-radius: 4px;">
                              <button type="button" id="backfillButton" class="btn secondary">
                                Run Backfill
                              </button>
                              <button type="button" id="dailySyncButton" class="btn secondary">
                                Run Daily Sync
                              </button>
                            </div>
                          </div>
              
              <!-- ULTRA SIMPLE JAVASCRIPT - NO COMPLEXITY -->
              <script>
                console.log('[AUTOMATION-NEW] Starting ultra-simple automation system...');
                
                // Simple function to show status
                function showStatus(message, isSuccess = true) {
                  const statusEl = document.getElementById('saveStatus');
                  if (statusEl) {
                    statusEl.textContent = message;
                    statusEl.style.color = isSuccess ? '#28a745' : '#dc3545';
                    setTimeout(() => statusEl.textContent = '', 4000);
                  }
                }
                
                // Load settings on page load
                window.addEventListener('load', async function() {
                  console.log('[AUTOMATION-NEW] Page loaded, loading settings...');
                  
                  try {
                    const response = await fetch('/api/automation/get-settings');
                    if (response.ok) {
                      const settings = await response.json();
                      console.log('[AUTOMATION-NEW] Settings loaded:', settings);
                      
                      // Update form
                      const checkbox = document.getElementById('autoSendCheckbox');
                      const delayInput = document.getElementById('delayInput');
                      const channelSelect = document.getElementById('channelSelect');
                      
                      if (checkbox) checkbox.checked = settings.autoSend || false;
                      if (delayInput) delayInput.value = settings.delayMinutes || 0;
                      if (channelSelect) channelSelect.value = settings.channel || 'email';
                      
                      // Update display
                      const currentAutoSend = document.getElementById('currentAutoSend');
                      const currentDelay = document.getElementById('currentDelay');
                      const currentChannel = document.getElementById('currentChannel');
                      
                      if (currentAutoSend) currentAutoSend.textContent = settings.autoSend ? 'Enabled' : 'Disabled';
                      if (currentDelay) currentDelay.textContent = (settings.delayMinutes || 0) + ' minutes';
                      if (currentChannel) currentChannel.textContent = settings.channel || 'email';
                    } else {
                      console.log('[AUTOMATION-NEW] No settings found, using defaults');
                      showStatus('Using default settings', true);
                    }
                  } catch (error) {
                    console.error('[AUTOMATION-NEW] Error loading settings:', error);
                    showStatus('Error loading settings', false);
                  }
                });
                
                // Save button click handler
                document.addEventListener('click', async function(e) {
                  if (e.target.id === 'saveButton') {
                    console.log('[AUTOMATION-NEW] Save button clicked');
                    
                    const checkbox = document.getElementById('autoSendCheckbox');
                    const delayInput = document.getElementById('delayInput');
                    const channelSelect = document.getElementById('channelSelect');
                    
                    if (!checkbox || !delayInput || !channelSelect) {
                      showStatus('❌ Form elements not found', false);
                      return;
                    }
                    
                    const settings = {
                      autoSend: checkbox.checked,
                      delayMinutes: parseInt(delayInput.value) || 0,
                      channel: channelSelect.value
                    };
                    
                    console.log('[AUTOMATION-NEW] Saving settings:', settings);
                    
                    try {
                      const response = await fetch('/api/automation/save-settings', {
                        method: 'POST',
                        headers: { 
                          'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(settings)
                      });
                      
                      if (response.ok) {
                        const result = await response.json();
                        console.log('[AUTOMATION-NEW] Save successful:', result);
                        showStatus('✅ Settings saved successfully!', true);
                        
                        // Update display immediately
                        const currentAutoSend = document.getElementById('currentAutoSend');
                        const currentDelay = document.getElementById('currentDelay');
                        const currentChannel = document.getElementById('currentChannel');
                        
                        if (currentAutoSend) currentAutoSend.textContent = settings.autoSend ? 'Enabled' : 'Disabled';
                        if (currentDelay) currentDelay.textContent = settings.delayMinutes + ' minutes';
                        if (currentChannel) currentChannel.textContent = settings.channel;
                      } else {
                        throw new Error(`HTTP ${response.status}`);
                      }
                    } catch (error) {
                      console.error('[AUTOMATION-NEW] Save failed:', error);
                      showStatus('❌ Failed to save: ' + error.message, false);
                    }
                  }
                  
                  // Backfill button
                  if (e.target.id === 'backfillButton') {
                    console.log('[AUTOMATION-NEW] Backfill button clicked!');
                    const daysInput = document.getElementById('backfillDays');
                    const days = daysInput ? parseInt(daysInput.value) || 30 : 30;
                    console.log('[AUTOMATION-NEW] Running backfill for', days, 'days');
                    showStatus('🔄 Running backfill...', true);
                    
                    try {
                      // Get CSRF token from meta tag or form
                      const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content') || 
                                      document.querySelector('input[name="_csrf"]')?.value || '';
                      console.log('[AUTOMATION-NEW] CSRF token found:', csrfToken ? 'YES' : 'NO', 'Length:', csrfToken.length);
                      
                      const response = await fetch('/mock/square/backfill', {
                        method: 'POST',
                        headers: { 
                          'Content-Type': 'application/x-www-form-urlencoded'
                        },
                        body: `days=${days}`
                      });
                      
                      console.log('[AUTOMATION-NEW] Backfill response status:', response.status);
                      
                      if (response.ok) {
                        const result = await response.json();
                        console.log('[AUTOMATION-NEW] Backfill success:', result);
                        showStatus(`✅ Backfill complete! Processed: ${result.processed || 'unknown'}`, true);
                      } else {
                        const errorText = await response.text();
                        console.error('[AUTOMATION-NEW] Backfill failed with status:', response.status, errorText);
                        showStatus(`❌ Backfill failed (${response.status})`, false);
                      }
                    } catch (error) {
                      console.error('[AUTOMATION-NEW] Backfill error:', error);
                      showStatus('❌ Backfill failed: ' + error.message, false);
                    }
                  }
                  
                  // Daily sync button
                  if (e.target.id === 'dailySyncButton') {
                    console.log('[AUTOMATION-NEW] Daily sync button clicked!');
                    showStatus('🔄 Running daily sync...', true);
                    
                    try {
                      // Get CSRF token from meta tag or form
                      const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content') || 
                                      document.querySelector('input[name="_csrf"]')?.value || '';
                      console.log('[AUTOMATION-NEW] CSRF token found:', csrfToken ? 'YES' : 'NO', 'Length:', csrfToken.length);
                      
                      const response = await fetch('/mock/square/sync-daily', {
                        method: 'POST',
                        headers: { 
                          'Content-Type': 'application/x-www-form-urlencoded'
                        },
                        body: ''
                      });
                      
                      console.log('[AUTOMATION-NEW] Daily sync response status:', response.status);
                      
                      if (response.ok) {
                        const result = await response.json();
                        console.log('[AUTOMATION-NEW] Daily sync success:', result);
                        showStatus(`✅ Daily sync complete! Processed: ${result.processed || 'unknown'}`, true);
                      } else {
                        const errorText = await response.text();
                        console.error('[AUTOMATION-NEW] Daily sync failed with status:', response.status, errorText);
                        showStatus(`❌ Daily sync failed (${response.status})`, false);
                      }
                    } catch (error) {
                      console.error('[AUTOMATION-NEW] Daily sync error:', error);
                      showStatus('❌ Daily sync failed: ' + error.message, false);
                    }
                  }
                });
                
                console.log('[AUTOMATION-NEW] Event listeners set up, system ready!');
              </script>
            </div>

            <div class="card base-card">
              <h2>Recent Activity</h2>
                    <div class="table-wrap">
                    <table>
                        <thead>
                            <tr>
                      <th>When</th>
                      <th>Event</th>
                                <th>Details</th>
                            </tr>
                        </thead>
                        <tbody>
                    <% if (Array.isArray(recentEvents) && recentEvents.length) { %>
                      <% recentEvents.forEach(ev => { %>
                        <tr>
                          <td class="event-time" data-timestamp="<%= ev.ts %>">Loading...</td>
                          <td><%= ev.type %></td>
                          <td style="color:var(--muted)">
                            <% if (ev.type === 'review_submitted') { %>
                              <%= ev.payload.rating %>★ review from <%= ev.payload.email %>
                              <% if (ev.payload.hasComment) { %> (with comment)<% } %>
                            <% } else if (ev.type === 'send_email') { %>
                              Email sent to <%= ev.payload.email %>
                            <% } else if (ev.type === 'send_sms') { %>
                              SMS sent to <%= ev.payload.phone %>
                            <% } else if (ev.type === 'send_skipped') { %>
                              Skipped: <%= ev.payload.reason %>
                            <% } else if (ev.type === 'send_error') { %>
                              Error: <%= ev.payload.message %>
                            <% } else if (ev.payload && ev.payload.email) { %>
                              email: <%= ev.payload.email %>
                            <% } %>
                            <% if (ev.payload && ev.payload.phone) { %> phone: <%= ev.payload.phone %><% } %>
                            <% if (ev.payload && ev.payload.shortLink) { %> link: <%= ev.payload.shortLink %><% } %>
                                    </td>
                                </tr>
                      <% }) %>
                    <% } else { %>
                      <tr><td colspan="3" style="text-align:center; color: var(--muted); padding:18px">No recent activity yet.</td></tr>
                    <% } %>
                        </tbody>
                    </table>
                    </div>
            </div>

            <div class="card base-card" id="onboardingBanner" style="<%= (typeof onboardingDismissed !== 'undefined' && onboardingDismissed) ? 'display:none;' : '' %>">
              <div style="display:flex; justify-content:space-between; align-items:flex-start;">
                <h2>Onboarding Checklist</h2>
                <button id="dismissOnboarding" type="button" style="background:none; border:none; color:var(--muted); cursor:pointer; font-size:18px; padding:0;">&times;</button>
              </div>
              <ul id="obList" style="list-style:none;padding:0;margin:0;color:var(--muted);line-height:1.9">
                <li>Loading…</li>
              </ul>
            </div>

            <div class="card base-card" id="reviewKitCard">
              <h2>Review Collection Kit</h2>
              <div id="kitActiveState" style="<%= hasGooglePlaceId ? '' : 'display:none' %>">
                <!-- Horizontal layout: Short link and QR code side by side -->
                <div style="display: flex; gap: 20px; margin-bottom: 20px; align-items: flex-start;">
                  <!-- Short link section - takes up more space -->
                  <div style="flex: 2; min-width: 0;">
                    <div style="font-weight:600; color: var(--text-secondary); margin-bottom:.5rem;">Short link</div>
                    <div class="link-box" id="kitShortLink" style="word-break:break-all; padding: 12px; background: var(--bg-secondary); border: 1px solid var(--border); border-radius: 8px; font-family: monospace; font-size: 14px;">Loading…</div>
                    <div class="btns" style="display:flex; gap:.5rem; margin-top:.75rem;">
                      <button class="btn btn-secondary" id="kitCopyLink" type="button">Copy</button>
                    </div>
                  </div>
                  
                  <!-- QR code section - smaller, right side -->
                  <div style="flex: 0 0 auto;">
                    <div style="font-weight:600; color: var(--text-secondary); margin-bottom:.5rem; text-align: center;">QR Code</div>
                    <img id="kitQrPreview" alt="QR code" class="qr-placeholder" src="" style="width: 120px; height: 120px; border: 1px solid var(--border); border-radius: 8px;"/>
                  </div>
                </div>
                
                <!-- Download buttons in a row -->
                <div style="display: flex; gap: 12px; margin-bottom: 20px; flex-wrap: wrap;">
                  <a id="btnSignPdf" class="btn btn-secondary" href="#" download style="flex: 1; min-width: 200px; text-align: center;">Download Countertop Sign (PDF)</a>
                  <a id="btnStickerPdf" class="btn btn-secondary" href="#" download style="flex: 1; min-width: 200px; text-align: center;">Download Sticker Sheet (PDF)</a>
                </div>
                
                <!-- Receipt text section -->
                <div>
                  <div style="font-weight:600; color: var(--text-secondary); margin-bottom:.5rem;">Suggested receipt text</div>
                  <textarea id="kitReceiptText" readonly style="width:100%; min-height:92px; padding:12px; border:1px solid var(--border); border-radius:8px; background: var(--bg); font-size: 14px; line-height: 1.4;"></textarea>
                  <div style="margin-top:.75rem">
                    <button class="btn btn-secondary" id="kitCopyReceipt" type="button">Copy Text</button>
                  </div>
                </div>
              </div>
              <div id="kitEmptyState" style="<%= hasGooglePlaceId ? 'display:none' : '' %>">
                <div style="text-align: center; padding: 20px;">
                  <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="color: var(--muted); margin-bottom: 12px;">
                      <rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect>
                      <path d="M7 11V7a5 5 0 0 1 10 0v4"></path>
                  </svg>
                  <p style="color: var(--muted); margin-bottom: 16px;">Add your Google Place ID in Settings to unlock your Review Collection Kit.</p>
                  <button id="completeSetupBtn" class="btn-primary">Complete Setup</button>
                </div>
              </div>
            </div>

            <div class="card base-card">
              <h2 style="margin:0 0 12px;border-bottom:1px solid var(--border);padding-bottom:10px">Subscription</h2>
              <% if (business.subscriptionStatus === 'active') { %>
                <div style="margin-bottom:10px;color:var(--muted)">Plan: <strong>Pro</strong></div>
                <% if (billing) { %>
                  <div style="color:var(--muted);margin-bottom:8px">
                    <% if (billing.card) { %>
                      Card on file: <strong><%= billing.card.brand %></strong> ending in <strong><%= billing.card.last4 %></strong> (exp <%= billing.card.exp %>)
                <% } else { %>
                      No payment method on file yet.
                <% } %>
          </div>
                  <div style="margin-top:6px;color:var(--muted);font-size:13px">
                    <span>Renews: <strong><%= billing.currentPeriodEnd ? new Date(billing.currentPeriodEnd).toLocaleString() : '—' %></strong></span>
                    <% if (billing.cancelAtPeriodEnd) { %>
                      <span style="margin-left:10px;color:#B45309">(Cancels at period end)</span>
          <% } %>
                  </div>
                <% } %>
                <a href="/billing-portal" class="btn btn-secondary" style="margin-top:12px">Manage Billing</a>
                <% } else { %>
                <% if (typeof pageError !== 'undefined' && pageError) { %>
                  <div class="notice-banner" style="background:#FEF2F2;color:#991B1B">Error: <%= pageError %></div>
                <% } %>
                <% if (typeof pageSuccess !== 'undefined' && pageSuccess) { %>
                  <div class="notice-banner" style="background:#F0FDF4;color:#166534;border:1px solid #BBF7D0">
                    <% if (pageSuccess === 'automation_saved') { %>
                      ✅ Automation settings saved successfully!
                    <% } else { %>
                      ✅ <%= pageSuccess %>
                    <% } %>
                  </div>
                <% } %>
                <% if (typeof business !== 'undefined' && business.subscriptionStatus === 'trial' && business.trialEndsAt) { %>
                  <div class="notice-banner" style="margin-bottom:12px">
                    <span aria-hidden="true">✅</span>
                    <span>Free trial active — <strong><%= (typeof trialDaysLeft !== 'undefined' && trialDaysLeft != null) ? (trialDaysLeft + ' days left') : ('ends ' + new Date(business.trialEndsAt).toLocaleDateString()) %></strong></span>
                  </div>
                  
                  <!-- Trial Feature Limits & Analytics -->
                  <div class="card base-card" style="margin:12px 0 20px; border: 2px solid #FEF3C7; background: #FFFBEB;">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px;">
                      <h2 style="margin:0; color: #92400E; border-bottom: 1px solid #FDE68A; padding-bottom: 10px;">
                        🚀 Trial Features & Limits
                      </h2>
                      <button id="btn-trial-tour" class="btn btn-secondary" style="background: #FEF3C7; border: 1px solid #FDE68A; color: #92400E; font-size: 12px; padding: 6px 12px;">
                        🎯 Take Tour
                      </button>
                      <script>
                        // Simple inline tour functionality
                        document.getElementById('btn-trial-tour').addEventListener('click', function() {
                          console.log('[TOUR-INLINE] Button clicked!');
                          
                          // Create modal dynamically
                          const modal = document.createElement('div');
                          modal.style.cssText = `
                            position: fixed;
                            top: 0;
                            left: 0;
                            width: 100%;
                            height: 100%;
                            background: rgba(0, 0, 0, 0.8);
                            display: flex;
                            align-items: center;
                            justify-content: center;
                            z-index: 9999;
                          `;
                          
                          modal.innerHTML = `
                            <div style="
                              background: white;
                              border-radius: 16px;
                              padding: 32px;
                              max-width: 800px;
                              width: 90%;
                              max-height: 90vh;
                              overflow-y: auto;
                              position: relative;
                            ">
                              <div style="text-align: center; margin-bottom: 24px;">
                                <h3 style="margin: 0 0 8px; color: #92400E; font-size: 24px;">🎯 Dashboard Tour</h3>
                                <p style="margin: 0; color: #6B7280; font-size: 16px;">Watch this video to learn how to use your dashboard effectively</p>
                              </div>
                              
                              <div style="position: relative; width: 100%; padding-bottom: 56.25%; margin-bottom: 24px;">
                                <iframe 
                                  style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border: none; border-radius: 8px;"
                                  src="https://www.youtube.com/embed/-ZESfSZCY-0?rel=0&modestbranding=1"
                                  title="Dashboard Tour Video"
                                  frameborder="0"
                                  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                                  allowfullscreen>
                                </iframe>
                              </div>
                              
                              <div style="text-align: center;">
                                <button onclick="this.closest('[style*=\\'position: fixed\\']').remove()" style="
                                  background: #6B7280;
                                  color: white;
                                  border: none;
                                  padding: 12px 24px;
                                  border-radius: 8px;
                                  font-weight: 600;
                                  cursor: pointer;
                                  font-size: 16px;
                                ">Close Tour</button>
                              </div>
                            </div>
                          `;
                          
                          // Close on outside click
                          modal.addEventListener('click', function(e) {
                            if (e.target === modal) {
                              modal.remove();
                            }
                          });
                          
                          document.body.appendChild(modal);
                          console.log('[TOUR-INLINE] Modal created and displayed');
                        });
                      </script>
                    </div>
                    
                    <!-- Trial Usage Analytics -->
                    <div style="margin-bottom: 20px;">
                      <h3 style="font-size: 16px; margin: 0 0 12px; color: #92400E;">Your Trial Usage</h3>
                      <div class="kpis" style="grid-template-columns: repeat(2, 1fr); gap: 16px;">
                        <div class="kpi" style="background: #FEF3C7; border: 1px solid #FDE68A;">
                          <div class="label" style="color: #92400E;">Review Requests</div>
                          <div class="value" style="color: #92400E;" id="trialReviewCount">0</div>
                          <div style="font-size: 11px; color: #B45309; margin-top: 4px;">of 25 allowed</div>
                        </div>
                        <div class="kpi" style="background: #FEF3C7; border: 1px solid #FDE68A;">
                          <div class="label" style="color: #92400E;">Days Remaining</div>
                          <div class="value" style="color: #92400E;" id="trialDaysLeft"><%= (typeof trialDaysLeft !== 'undefined' && trialDaysLeft != null) ? trialDaysLeft : '—' %></div>
                          <div style="font-size: 11px; color: #B45309; margin-top: 4px;">trial period</div>
                        </div>
                      </div>
                    </div>
                    
                    <!-- Trial vs Pro Feature Comparison -->
                    <div style="margin-bottom: 20px;">
                      <h3 style="font-size: 16px; margin: 0 0 12px; color: #92400E;">What's Available in Trial</h3>
                      <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 16px; font-size: 14px;">
                        <div>
                          <h4 style="margin: 0 0 8px; color: #92400E; font-size: 14px;">✅ Trial Features</h4>
                          <ul style="margin: 0; padding-left: 20px; color: #92400E; line-height: 1.6;">
                            <li>25 review requests</li>
                            <li>Basic analytics</li>
                            <li>Review Collection Kit</li>
                            <li>Square integration</li>
                            <li>Email support</li>
                          </ul>
                        </div>
                        <div>
                          <h4 style="margin: 0 0 8px; color: #B45309; font-size: 14px;">🔒 Pro Features</h4>
                          <ul style="margin: 0; padding-left: 20px; color: #B45309; line-height: 1.6;">
                            <li>Unlimited requests</li>
                            <li>Advanced analytics</li>
                            <li>Export data</li>
                            <li>Priority support</li>
                            <li>Custom branding</li>
                          </ul>
                        </div>
                      </div>
                    </div>
                    
                    <!-- Trial Progress & Conversion CTA -->
                    <div style="margin-bottom: 20px;">
                      <h3 style="font-size: 16px; margin: 0 0 12px; color: #92400E;">Trial Progress</h3>
                      <div style="background: #F3F4F6; border-radius: 8px; padding: 16px; border: 1px solid #E5E7EB;">
                        <div style="display: flex; justify-content: space-between; margin-bottom: 8px; font-size: 14px; color: #6B7280;">
                          <span>Review Requests Used</span>
                          <span id="trialProgressText">0 / 25</span>
                        </div>
                        <div style="background: #E5E7EB; border-radius: 4px; height: 8px; overflow: hidden;">
                          <div id="trialProgressBar" style="background: linear-gradient(90deg, #10B981 0%, #059669 100%); height: 100%; width: 0%; transition: width 0.3s ease;"></div>
                        </div>
                        <div style="margin-top: 8px; font-size: 12px; color: #6B7280;">
                          <span id="trialProgressMessage">Great start! You have 25 review requests available.</span>
                        </div>
                      </div>
                    </div>
                    
                    <!-- Trial Conversion CTA -->
                    <div style="text-align: center; padding: 20px; background: linear-gradient(135deg, #FEF3C7 0%, #FDE68A 100%); border-radius: 12px; border: 2px solid #F59E0B; position: relative; overflow: hidden;">
                      <div style="position: absolute; top: -10px; right: -10px; background: #DC2626; color: white; padding: 4px 12px; border-radius: 20px; font-size: 12px; font-weight: 700; transform: rotate(15deg);">
                        LIMITED TIME
                      </div>
                      <h3 style="margin: 0 0 8px; color: #92400E; font-size: 18px;">🚀 Unlock Your Full Potential!</h3>
                      <p style="margin: 0 0 16px; color: #92400E; font-weight: 600; line-height: 1.5;">
                        Don't let your trial expire! Upgrade to Pro and get <strong>unlimited review requests</strong>, 
                        <strong>advanced analytics</strong>, and <strong>priority support</strong>.
                      </p>
                      <div style="display: flex; gap: 12px; justify-content: center; flex-wrap: wrap;">
                        <button id="btn-upgrade-pro" class="btn-primary" style="background: linear-gradient(135deg, #F59E0B 0%, #D97706 100%); border: none; color: white; padding: 14px 28px; border-radius: 8px; font-weight: 700; cursor: pointer; font-size: 16px; box-shadow: 0 4px 14px rgba(245, 158, 11, 0.3);">
                          💎 Upgrade to Pro - $49.99/mo
                        </button>
                        <button id="btn-trial-extend" class="btn btn-secondary" style="background: transparent; border: 2px solid #F59E0B; color: #92400E; padding: 14px 20px; border-radius: 8px; font-weight: 600; cursor: pointer;">
                          📧 Contact Sales
                        </button>
                      </div>
                      <p style="margin: 16px 0 0; font-size: 12px; color: #B45309;">
                        ⏰ Trial ends in <strong id="trialUrgencyText"><%= (typeof trialDaysLeft !== 'undefined' && trialDaysLeft !== null) ? trialDaysLeft : '—' %></strong> days
                      </p>
                    </div>
                  </div>
                <% } %>
                <!-- POS Integration Status -->
                <div class="card base-card" style="margin:12px 0 20px">
                  <h2 style="margin:0 0 12px;border-bottom:1px solid var(--border);padding-bottom:10px">Point of Sale Integrations</h2>
                  <div id="posStatus" class="notice-banner" style="display:none; margin-bottom:12px"></div>
                  <div style="display:flex; gap:12px; align-items:center; flex-wrap:wrap">
                    <button id="btnSquareConnect" class="btn btn-secondary">Connect to Square</button>
                    <button id="btnSquareDisconnect" class="btn btn-secondary" style="display:none">Disconnect</button>
                  </div>
                  <% if (!(business && business.googlePlaceId)) { %>
                  <div style="margin-top:12px; color: var(--muted); font-size:13px">
                    Tip: add your Google Place ID in <a href="#settings-link" style="color:var(--accent); text-decoration:underline">Settings</a> so your review link and QR are generated.
                  </div>
                  <% } %>
                </div>

                <!-- Show upgrade CTA when not on Pro -->
                <div class="plan-cols" style="margin-top:12px">
                  <div class="plan-col" style="border:2px solid #10B981; border-radius:12px">
                    <div class="card-title" style="font-size:18px">Pro</div>
                    <div class="plan-price">
                      <div class="price-figure">$49.99</div>
                      <div class="price-label">/mo</div>
                    </div>
                    <ul class="plan-features">
                      <li><span class="check">✓</span>Unlimited requests</li>
                      <li><span class="check">✓</span>Full analytics & exports</li>
                      <li><span class="check">✓</span>Priority support</li>
                    </ul>
                    <div class="plan-actions">
                                              <button id="btn-upgrade-pro-secondary" class="btn-primary">Upgrade to Pro</button>
                    </div>
                  </div>
                </div>
              <% } %>
            </div>
          </div>
        </div>
      </div>
    </main>
    <div class="toast" id="toast">Link copied</div>


    <div class="modal-overlay" id="cancelModal">
      <div class="modal">
        <h3>Cancel Pro subscription?</h3>
        <p>Are you sure you want to cancel your Pro subscription? Your plan will remain active until the end of your current billing period.</p>
        <div class="modal-actions">
          <button class="btn-ghost" id="cancelClose">Keep Pro</button>
          <button class="btn-danger" id="cancelConfirm">Cancel Pro</button>
        </div>
      </div>
    </div>
    <%- include('partials/footer') %>
    <script>
      (function(){
        // Trial Analytics & Feature Management
        async function fetchTrialAnalytics() {
          try {
            const uid = '<%= user && user.uid ? user.uid : "" %>';
            if (!uid) return;
            
            // Fetch trial usage data
            const resp = await fetch('/api/merchants/' + uid + '/trial-usage', { credentials: 'same-origin' });
            if (resp.ok) {
              const data = await resp.json();
              const reviewCountElement = document.getElementById('trialReviewCount');
              if (reviewCountElement) {
                reviewCountElement.textContent = data.reviewCount || 0;
                
                // Add visual indicator if approaching limit
                if (data.reviewCount >= 20) {
                  reviewCountElement.style.color = '#DC2626';
                  reviewCountElement.parentElement.style.background = '#FEE2E2';
                  reviewCountElement.parentElement.style.borderColor = '#FCA5A5';
                } else if (data.reviewCount >= 15) {
                  reviewCountElement.style.color = '#F59E0B';
                  reviewCountElement.parentElement.style.background = '#FEF3C7';
                  reviewCountElement.parentElement.style.borderColor = '#FDE68A';
                }
                
                // Update progress indicators
                updateTrialProgress(data.reviewCount || 0);
                
                // Update urgency text
                const urgencyText = document.getElementById('trialUrgencyText');
                if (urgencyText && data.trialDaysLeft !== null) {
                  urgencyText.textContent = data.trialDaysLeft;
                  
                  // Add urgency styling for low days
                  if (data.trialDaysLeft <= 3) {
                    urgencyText.style.color = '#DC2626';
                    urgencyText.style.fontWeight = '900';
                  } else if (data.trialDaysLeft <= 7) {
                    urgencyText.style.color = '#F59E0B';
                    urgencyText.style.fontWeight = '700';
                  }
                }
              }
            }
          } catch (error) {
            console.error('[TRIAL-ANALYTICS] Error fetching trial data:', error);
          }
        }

        // Handle trial upgrade button
        function initializeTrialUpgrade() {
          const trialUpgradeBtn = document.getElementById('btn-upgrade-trial');
          console.log('[TRIAL-UPGRADE] Looking for button:', trialUpgradeBtn);
          if (trialUpgradeBtn) {
            console.log('[TRIAL-UPGRADE] Button found, adding click listener');
            trialUpgradeBtn.addEventListener('click', async function() {
              console.log('[TRIAL-UPGRADE] Button clicked!');
              console.log('[TRIAL-UPGRADE] Stripe available:', !!window.Stripe);
              console.log('[TRIAL-UPGRADE] CSRF token:', '<%= (typeof csrfToken !== 'undefined' ? csrfToken : '') %>');
              
              trialUpgradeBtn.disabled = true;
              trialUpgradeBtn.textContent = 'Redirecting...';
              
              try {
                console.log('[TRIAL-UPGRADE] Making checkout request...');
                const resp = await fetch('/create-checkout-session', {
                  method: 'POST',
                  headers: { 'X-Requested-With': 'XMLHttpRequest', 'Content-Type': 'application/x-www-form-urlencoded' },
                  body: '_csrf=<%= (typeof csrfToken !== 'undefined' ? csrfToken : '') %>',
                  credentials: 'same-origin'
                });
                
                console.log('[TRIAL-UPGRADE] Response status:', resp.status);
                console.log('[TRIAL-UPGRADE] Response ok:', resp.ok);
                
                if (!resp.ok) { 
                  console.error('[TRIAL-UPGRADE] Response not ok:', resp.status, resp.statusText);
                  window.location.href = '/dashboard?e=' + encodeURIComponent('Checkout request failed'); 
                  return; 
                }
                
                const data = await resp.json().catch((e) => {
                  console.error('[TRIAL-UPGRADE] JSON parse error:', e);
                  return null;
                });
                
                console.log('[TRIAL-UPGRADE] Response data:', data);
                
                if (data && data.id && window.Stripe) {
                  console.log('[TRIAL-UPGRADE] Redirecting to Stripe checkout...');
                  const { error } = await window.Stripe.redirectToCheckout({ sessionId: data.id });
                  if (!error) return;
                  console.error('[TRIAL-UPGRADE] Stripe redirect error:', error);
                }
                if (data && data.url) { 
                  console.log('[TRIAL-UPGRADE] Redirecting to URL:', data.url);
                  window.location = data.url; 
                  return; 
                }
                if (resp.redirected && resp.url) { 
                  console.log('[TRIAL-UPGRADE] Redirecting to redirected URL:', resp.url);
                  window.location = resp.url; 
                  return; 
                }
                console.error('[TRIAL-UPGRADE] No valid redirect found');
                window.location.href = '/dashboard?e=' + encodeURIComponent('Checkout session not available');
              } catch (e) {
                console.error('[TRIAL-UPGRADE] Checkout error:', e);
                window.location.href = '/dashboard?e=' + encodeURIComponent('Checkout failed');
              } finally {
                // Reset button if something goes wrong
                console.log('[TRIAL-UPGRADE] Resetting button state');
                trialUpgradeBtn.disabled = false;
                trialUpgradeBtn.textContent = '💎 Upgrade to Pro - $49.99/mo';
              }
            });
          } else {
            console.error('[TRIAL-UPGRADE] Button not found!');
          }
        }

        // Initialize trial tour functionality - Video Modal
        function initializeTrialTour() {
          const tourBtn = document.getElementById('btn-trial-tour');
          const tourModal = document.getElementById('trialTourModal');
          const tourClose = document.getElementById('tourClose');
          
          console.log('[TOUR] Tour button found:', tourBtn);
          console.log('[TOUR] Tour modal found:', tourModal);
          console.log('[TOUR] Tour close button found:', tourClose);
          
          if (tourBtn && tourModal) {
            tourBtn.addEventListener('click', function() {
              console.log('[TOUR] Tour button clicked!');
              console.log('[TOUR] Modal element before change:', tourModal);
              console.log('[TOUR] Modal computed style before:', window.getComputedStyle(tourModal).display);
              
              tourModal.style.display = 'flex';
              console.log('[TOUR] Modal display set to flex');
              console.log('[TOUR] Modal current display:', tourModal.style.display);
              console.log('[TOUR] Modal computed style after:', window.getComputedStyle(tourModal).display);
              console.log('[TOUR] Modal visible:', tourModal.offsetParent !== null);
            });
          } else {
            console.error('[TOUR] Missing required elements:', { tourBtn: !!tourBtn, tourModal: !!tourModal });
          }
          
          if (tourClose) {
            tourClose.addEventListener('click', function() {
              tourModal.style.display = 'none';
            });
          }
          
          // Tour navigation
          document.addEventListener('click', function(e) {
            if (e.target.classList.contains('tour-next')) {
              const nextStep = parseInt(e.target.dataset.next);
              showTourStep(nextStep);
            } else if (e.target.classList.contains('tour-prev')) {
              const prevStep = parseInt(e.target.dataset.prev);
              showTourStep(prevStep);
            }
          });
        }
        

        
        // Update trial progress indicators
        function updateTrialProgress(reviewCount) {
          const progressBar = document.getElementById('trialProgressBar');
          const progressText = document.getElementById('trialProgressText');
          const progressMessage = document.getElementById('trialProgressMessage');
          
          if (progressBar && progressText && progressMessage) {
            const percentage = Math.min((reviewCount / 25) * 100, 100);
            progressBar.style.width = percentage + '%';
            progressText.textContent = `${reviewCount} / 25`;
            
            // Update progress message based on usage
            if (reviewCount === 0) {
              progressMessage.textContent = 'Great start! You have 25 review requests available.';
            } else if (reviewCount < 10) {
              progressMessage.textContent = 'Good progress! You\'re making great use of your trial.';
            } else if (reviewCount < 20) {
              progressMessage.textContent = 'Getting busy! Consider upgrading for unlimited requests.';
            } else if (reviewCount < 25) {
              progressMessage.textContent = 'Almost at your limit! Upgrade now to continue growing.';
            } else {
              progressMessage.textContent = 'Trial limit reached! Upgrade to Pro for unlimited requests.';
            }
            
            // Update progress bar color based on usage
            if (reviewCount >= 25) {
              progressBar.style.background = 'linear-gradient(90deg, #DC2626 0%, #B91C1C 100%)';
            } else if (reviewCount >= 20) {
              progressBar.style.background = 'linear-gradient(90deg, #F59E0B 0%, #D97706 100%)';
            } else if (reviewCount >= 15) {
              progressBar.style.background = 'linear-gradient(90deg, #F59E0B 0%, #F59E0B 100%)';
            } else {
              progressBar.style.background = 'linear-gradient(90deg, #10B981 0%, #059669 100%)';
            }
          }
        }
        
        // Handle trial extend button
        function initializeTrialExtend() {
          const extendBtn = document.getElementById('btn-trial-extend');
          console.log('[TRIAL-EXTEND] Looking for button:', extendBtn);
          if (extendBtn) {
            console.log('[TRIAL-EXTEND] Button found, adding click listener');
            extendBtn.addEventListener('click', function() {
              console.log('[TRIAL-EXTEND] Button clicked!');
              // Open email client to contact sales
              const subject = encodeURIComponent('Trial Extension Request - Reviews & Marketing');
              const body = encodeURIComponent(`Hi there,\n\nI'm interested in extending my trial period for Reviews & Marketing. Could you please provide more information about trial extensions?\n\nThank you!`);
              window.location.href = `mailto:sales@reviewsandmarketing.com?subject=${subject}&body=${body}`;
            });
          }
        }

        // Review Collection Kit loader
        async function fetchKit(){
          try {
            const uid = '<%= user && user.uid ? user.uid : "" %>';
            if (!uid) return;
            const resp = await fetch('/api/merchants/' + uid + '/assets', { credentials: 'same-origin' });
            if (!resp.ok) return;
            const data = await resp.json();
            var shortBox = document.getElementById('kitShortLink');
            var qrImg = document.getElementById('kitQrPreview');
            var signA = document.getElementById('btnSignPdf');
            var stickerA = document.getElementById('btnStickerPdf');
            var receipt = document.getElementById('kitReceiptText');
            if (shortBox && data.shortLink) shortBox.textContent = data.shortLink;
            if (qrImg && data.qrCodePngUrl) { qrImg.src = data.qrCodePngUrl; qrImg.classList.remove('qr-placeholder'); }
            if (signA) { if (data.signPdfUrl) { signA.href = data.signPdfUrl; signA.removeAttribute('aria-disabled'); } else { signA.href = '#'; signA.setAttribute('aria-disabled','true'); } }
            if (stickerA) { if (data.stickerPdfUrl) { stickerA.href = data.stickerPdfUrl; stickerA.removeAttribute('aria-disabled'); } else { stickerA.href = '#'; stickerA.setAttribute('aria-disabled','true'); } }
            if (shortBox && data.needsPlaceId) {
              shortBox.innerHTML = 'Add your Google Place ID in <a href="#settings-link" id="goPlaceIdLink" style="color:var(--accent);text-decoration:underline">Settings</a> to generate your public link';
              try{
                const go = document.getElementById('goPlaceIdLink');
                if (go) {
                  go.addEventListener('click', function(e){
                    e.preventDefault();
                    var placeInput = document.getElementById('googlePlaceId');
                    var hint = document.getElementById('placeIdHint');
                    if (placeInput) {
                      if (hint) { hint.style.display = 'flex'; }
                      placeInput.scrollIntoView({ behavior: 'smooth', block: 'center' });
                      var prev = placeInput.style.boxShadow;
                      placeInput.style.boxShadow = '0 0 0 4px rgba(16,185,129,.35)';
                      setTimeout(function(){ placeInput.style.boxShadow = prev; placeInput.focus(); }, 800);
                    } else {
                      window.location.hash = 'settings-link';
                    }
                  });
                }
              }catch(_){ }
            }
            if (receipt) {
              const link = data.shortLink || '';
              receipt.value = `Thanks for your purchase! If we made your day, please leave us a quick 5-star review here: ${link}`;
            }
          } catch(e) { console.error('kit load error', e); }
        }
        fetchKit();
        
        // Initialize trial features
        if ('<%= business && business.subscriptionStatus === "trial" %>' === 'true') {
          console.log('[TRIAL-INIT] Initializing trial features...');
          console.log('[TRIAL-INIT] Business subscription status:', '<%= business && business.subscriptionStatus %>');
          fetchTrialAnalytics();
          initializeTrialUpgrade();
          console.log('[TRIAL-INIT] About to initialize tour...');
          initializeTrialTour();
          console.log('[TRIAL-INIT] Tour initialized');
          initializeTrialExtend();
          console.log('[TRIAL-INIT] Trial features initialized');
        } else {
          console.log('[TRIAL-INIT] Not a trial user, skipping trial features');
          console.log('[TRIAL-INIT] Business subscription status:', '<%= business && business.subscriptionStatus %>');
        }
        
        // Enable editing Place ID if already set
        try{
          var editBtn = document.getElementById('btnEditPlaceId');
          var pid = document.getElementById('googlePlaceId');
          if (editBtn && pid){
            editBtn.addEventListener('click', function(){
              pid.removeAttribute('readonly');
              pid.style.background='';
              pid.style.color='';
              pid.focus();
              var prev = pid.style.boxShadow;
              pid.style.boxShadow = '0 0 0 4px rgba(16,185,129,.35)';
              setTimeout(function(){ pid.style.boxShadow = prev; }, 1200);
            });
          }
        }catch(_){ }

        // Copy helpers
        async function copyText2(str){
          try { if (navigator.clipboard && window.isSecureContext) { await navigator.clipboard.writeText(str); return true; } } catch(_){ }
          try { const ta=document.createElement('textarea'); ta.value=str; ta.setAttribute('readonly',''); ta.style.position='absolute'; ta.style.left='-9999px'; document.body.appendChild(ta); ta.select(); ta.setSelectionRange(0, str.length); const ok=document.execCommand('copy'); document.body.removeChild(ta); return ok; } catch(_){ return false; }
        }
        var kitCopyBtn = document.getElementById('kitCopyLink');
        if (kitCopyBtn) {
          kitCopyBtn.addEventListener('click', async function(){
            var shortBox = document.getElementById('kitShortLink');
            const ok = await copyText2(shortBox ? shortBox.textContent.trim() : '');
            if (ok) {
              // Mark "Send your first request" as completed
              try {
                const response = await fetch('/api/onboarding/mark-sent-first', {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                  body: '_csrf=<%= (typeof csrfToken !== 'undefined' ? csrfToken : '') %>',
                  credentials: 'same-origin'
                });
                if (response.ok) {
                  // Refresh the onboarding checklist to show updated status
                  const obList = document.getElementById('obList');
                  if (obList) {
                    const r = await fetch('/api/onboarding/status', { credentials:'same-origin' });
                    const j = await r.json().catch(()=>({}));
                    function liHtml(id, text, done){
                      return `<li id="${id}" style="cursor:pointer">${done ? '✅' : '—'} ${text}</li>`;
                    }
                    obList.innerHTML = [
                      liHtml('ob-placeid', '1. Add your Google Place ID', !!j.hasPlaceId),
                      liHtml('ob-short', '2. Copy and test your review link', !!j.hasShortLink),
                      liHtml('ob-pos', '3. Connect POS (Square)', !!j.posConnected),
                      liHtml('ob-send', '4. Send your first request', !!j.sentFirst)
                    ].join('');
                  }
                }
              } catch (error) {
                console.warn('Could not update onboarding status:', error);
              }
              alert('Short link copied!');
            } else {
              alert('Copy failed');
            }
          });
        }
        var kitCopyReceipt = document.getElementById('kitCopyReceipt');
        if (kitCopyReceipt) {
          kitCopyReceipt.addEventListener('click', async function(){
            var receipt = document.getElementById('kitReceiptText');
            const ok = await copyText2(receipt ? receipt.value : '');
            if (ok) alert('Receipt text copied!'); else alert('Copy failed');
          });
        }
        const btn = document.getElementById('copyBtn');
        if (!btn) return;
        const toast = document.getElementById('toast');
        async function copyText(str){
          // Try modern async clipboard API first
          try {
            if (navigator.clipboard && window.isSecureContext) {
              await navigator.clipboard.writeText(str);
              return true;
            }
          } catch(_){}
          // Fallback for Safari/iOS and older browsers
          try {
            const ta = document.createElement('textarea');
            ta.value = str; ta.setAttribute('readonly','');
            ta.style.position='absolute'; ta.style.left='-9999px';
            document.body.appendChild(ta);
            ta.select(); ta.setSelectionRange(0, str.length);
            const ok = document.execCommand('copy');
            document.body.removeChild(ta);
            return ok;
          } catch(_) { return false; }
        }
        btn.addEventListener('click', async () => {
          const link = document.getElementById('publicLink').innerText.trim();
          const ok = await copyText(link);
          if (ok) {
            toast.classList.add('show');
            setTimeout(()=>toast.classList.remove('show'), 1600);
          } else {
            alert('Copy failed');
          }
        });
      })();
    </script>
    <script>
      (function(){
        // First-time welcome modal and guided highlight to Google Place ID
        var welcomeKey = 'rp_welcome_seen';
        var hasSeen = localStorage.getItem(welcomeKey);
        var modal = document.getElementById('welcomeModal');
        var goBtn = document.getElementById('welcomeContinue');
        var placeInput = document.getElementById('googlePlaceId');
        if (!hasSeen && modal && goBtn) {
          modal.style.display = 'flex';
          goBtn.addEventListener('click', function(){
            modal.style.display = 'none';
            localStorage.setItem(welcomeKey, '1');
            if (placeInput) {
              placeInput.scrollIntoView({ behavior: 'smooth', block: 'center' });
              var prev = placeInput.style.boxShadow;
              placeInput.style.boxShadow = '0 0 0 4px rgba(16,185,129,.35)';
              setTimeout(function(){ placeInput.style.boxShadow = prev; }, 2200);
            }
          });
        }
      })();
    </script>
    <!-- Lightweight QR code generator; allowed in dev where CSP is disabled -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js"></script>
    <script src="https://js.stripe.com/v3/"></script>
    <script>
      (function(){
        var box = document.getElementById('qrcode');
        if (!box) return;
        var link = document.getElementById('publicLink').innerText.trim();
        // Clear any existing QR to avoid duplicates
        while (box.firstChild) box.removeChild(box.firstChild);
        try { new QRCode(box, { text: link, width: 160, height: 160, correctLevel: QRCode.CorrectLevel.M }); } catch(e) { console.error('QR error', e); }
      })();
    </script>
    <script>
      (function(){
        console.log('[DEBUG] Upgrade button script starting...');
        var upgradeBtn = document.getElementById('btn-upgrade-pro') || document.getElementById('btn-upgrade-pro-secondary');
        console.log('[DEBUG] Looking for upgrade button...');
        console.log('[DEBUG] btn-upgrade-pro found:', !!document.getElementById('btn-upgrade-pro'));
        console.log('[DEBUG] btn-upgrade-pro-secondary found:', !!document.getElementById('btn-upgrade-pro-secondary'));
        console.log('[DEBUG] upgradeBtn variable:', upgradeBtn);
        
        var downgradeBtn = document.getElementById('btn-downgrade');
        var modal = document.getElementById('cancelModal');
        var modalClose = document.getElementById('cancelClose');
        var modalConfirm = document.getElementById('cancelConfirm');
        
        // Handle upgrade to Pro button
        if (upgradeBtn) {
          console.log('[DEBUG] Upgrade button found, adding event listener...');
          upgradeBtn.addEventListener('click', async function() {
            console.log('[UPGRADE-PRO] Upgrade button clicked!');
            upgradeBtn.disabled = true;
            upgradeBtn.textContent = 'Redirecting...';
            
            try {
              console.log('[DEBUG] Attempting redirect to /pricing...');
              // Redirect to pricing page
              window.location.href = '/pricing';
            } catch (error) {
              console.error('[UPGRADE-PRO] Error:', error);
              upgradeBtn.disabled = false;
              upgradeBtn.textContent = 'Upgrade to Pro';
              alert('Error redirecting to pricing page. Please try again.');
            }
          });
          console.log('[DEBUG] Event listener added successfully');
        } else {
          console.log('[DEBUG] ❌ Upgrade button NOT found!');
          console.log('[DEBUG] All elements with "upgrade" in ID:');
          const allElements = document.querySelectorAll('*[id*="upgrade"]');
          allElements.forEach(el => console.log('[DEBUG] -', el.tagName, '#', el.id));
        }
        
        if (downgradeBtn && modal) {
          downgradeBtn.addEventListener('click', function(){ modal.style.display = 'flex'; });
          if (modalClose) modalClose.addEventListener('click', function(){ modal.style.display = 'none'; });
          modal.addEventListener('click', function(e){ if (e.target === modal) modal.style.display = 'none'; });
          if (modalConfirm) {
            modalConfirm.addEventListener('click', async function(){
              modalConfirm.disabled = true; modalConfirm.textContent = 'Cancelling…';
              try {
                const resp = await fetch('/subscription/cancel', { method: 'POST', headers: { 'X-Requested-With':'XMLHttpRequest', 'Content-Type':'application/x-www-form-urlencoded' }, body: '_csrf=<%= (typeof csrfToken !== 'undefined' ? csrfToken : '') %>' });
                if (resp.ok) { window.location.reload(); return; }
              } catch(_) {}
              modalConfirm.disabled = false; modalConfirm.textContent = 'Cancel Pro';
              alert('Could not cancel subscription. Try again.');
            });
          }
        }
        // POS connection UI logic
        async function refreshPosStatus(){
          try{
            const s = document.getElementById('posStatus');
            const c = document.getElementById('btnSquareConnect');
            const d = document.getElementById('btnSquareDisconnect');
            if (!s || !c || !d) return;
            const resp = await fetch('/api/pos/connection-status', { credentials:'same-origin' });
            const j = await resp.json().catch(()=>({ posConnection:{ isConnected:false } }));
            const pc = j.posConnection || { isConnected:false };
            if (pc.isConnected){
              s.style.display = 'block';
              s.textContent = `Successfully connected to ${pc.provider || 'POS'}${pc.connectedAt ? ' on ' + new Date(pc.connectedAt).toLocaleString() : ''}.`;
              c.style.display = 'none';
              d.style.display = '';
            } else {
              // try automatic repair if tokens were saved
              try{ await fetch('/api/pos/repair-status', { method:'POST', headers:{ 'X-Requested-With':'XMLHttpRequest', 'Content-Type':'application/x-www-form-urlencoded' }, body: '_csrf=<%= (typeof csrfToken !== 'undefined' ? csrfToken : '') %>', credentials:'same-origin' }); }catch(_){ }
              try{
                const r2 = await fetch('/api/pos/connection-status', { credentials:'same-origin' });
                const j2 = await r2.json();
                if (j2 && j2.posConnection && j2.posConnection.isConnected){
                  s.style.display = 'block';
                  s.textContent = `Successfully connected to ${j2.posConnection.provider || 'POS'}${j2.posConnection.connectedAt ? ' on ' + new Date(j2.posConnection.connectedAt).toLocaleString() : ''}.`;
                  c.style.display = 'none';
                  d.style.display = '';
                  return;
                }
              }catch(_){ }
              s.style.display = 'none';
              c.style.display = '';
              d.style.display = 'none';
            }
          }catch(_){ }
        }
        // Anchor highlight if navigated via #settings-link
        try{
          if (window.location.hash === '#settings-link'){
            var settingsCard = document.getElementById('settingsCard');
            var placeInput = document.getElementById('googlePlaceId');
            var hint = document.getElementById('placeIdHint');
            if (hint) hint.style.display = 'flex';
            if (placeInput) placeInput.focus();
            if (settingsCard){
              settingsCard.classList.add('anchor-pulse');
              setTimeout(function(){ settingsCard.classList.remove('anchor-pulse'); }, 1600);
            }
          }
        }catch(_){}

        // Auto-show success if redirected from callback
        try {
          const qp = new URLSearchParams(window.location.search);
          if (qp.get('pos') === 'square_connected') {
            const s = document.getElementById('posStatus');
            if (s) { s.style.display='block'; s.textContent = 'Successfully connected to Square.'; }
          }
        } catch(_){}
        refreshPosStatus();

        // Live onboarding status fetch + interactive checklist linking to settings input
        ;(async function(){
          try{
            // Reactive save for Google Place ID via JSON endpoint
            const settingsForm = document.querySelector('form[action="/update-settings"]');
            if (settingsForm) {
              settingsForm.addEventListener('submit', async function(e){
                e.preventDefault();
                const pidInput = document.getElementById('googlePlaceId');
                const placeId = pidInput ? (pidInput.value || '').trim() : '';
                const csrf = '<%= (typeof csrfToken !== 'undefined' ? csrfToken : '') %>';
                if (!placeId) { alert('Please enter a Google Place ID'); return; }
                try{
                  const r = await fetch('/api/settings', {
                    method:'POST',
                    headers:{ 'Content-Type':'application/json', 'Accept':'application/json', 'x-csrf-token': csrf, 'X-Requested-With':'XMLHttpRequest' },
                    credentials:'same-origin',
                    body: JSON.stringify({ googlePlaceId: placeId })
                  });
                  const j = await r.json().catch(()=>({}));
                  if (r.ok && j && j.ok) {
                    var emptyState = document.getElementById('kitEmptyState');
                    var activeState = document.getElementById('kitActiveState');
                    if (emptyState) emptyState.style.display = 'none';
                    if (activeState) activeState.style.display = '';
                    if (pidInput) { pidInput.setAttribute('readonly','readonly'); pidInput.style.background = '#F9FAFB'; pidInput.style.color = '#6B7280'; }
                    try { if (typeof fetchKit === 'function') fetchKit(); } catch(_){}
                    try{ const ob1 = document.getElementById('ob-placeid'); if (ob1) ob1.innerHTML = '✅ 1. Add your Google Place ID'; }catch(_){ }
                  } else {
                    alert('Could not save Place ID.');
                  }
                }catch(err){ console.error('place-id save failed', err); alert('Save failed'); }
              });
            }
            const completeSetupBtn = document.getElementById('completeSetupBtn');
            if (completeSetupBtn) {
              completeSetupBtn.addEventListener('click', () => {
                const settingsCard = document.getElementById('settingsCard');
                if (settingsCard) {
                  settingsCard.scrollIntoView({ behavior: 'smooth', block: 'center' });
                  settingsCard.classList.add('is-highlighted');
                  setTimeout(() => {
                    settingsCard.classList.remove('is-highlighted');
                  }, 2500);
                }
              });
            }

            const banner = document.getElementById('onboardingBanner');
            const dismissBtn = document.getElementById('dismissOnboarding');
            if (banner && dismissBtn) {
                dismissBtn.addEventListener('click', async () => {
                    try {
                        const resp = await fetch('/api/settings/dismiss-onboarding', {
                            method: 'POST',
                            headers: { 'X-Requested-With': 'XMLHttpRequest', 'Content-Type': 'application/x-www-form-urlencoded' },
                            body: '_csrf=<%= (typeof csrfToken !== 'undefined' ? csrfToken : '') %>',
                            credentials: 'same-origin'
                        });
                        if (resp.ok) {
                            banner.style.display = 'none';
                        }
                    } catch (e) {
                        console.error('Failed to dismiss onboarding', e);
                    }
                });
            }

            const ul = document.getElementById('obList');
            if (!ul) return;
            const r = await fetch('/api/onboarding/status', { credentials:'same-origin' });
            const j = await r.json().catch(()=>({}));
            function liHtml(id, text, done){
              return `<li id="${id}" style="cursor:pointer">${done ? '✅' : '—'} ${text}</li>`;
            }
            ul.innerHTML = [
              liHtml('ob-placeid', '1. Add your Google Place ID', !!j.hasPlaceId),
              liHtml('ob-short', '2. Copy and test your review link', !!j.hasShortLink),
              liHtml('ob-pos', '3. Connect POS (Square)', !!j.posConnected),
              liHtml('ob-send', '4. Send your first request', !!j.sentFirst)
            ].join('');
            
            // Auto-hide checklist if all items are completed
            if (j.hasPlaceId && j.hasShortLink && j.posConnected && j.sentFirst) {
              const onboardingBanner = document.getElementById('onboardingBanner');
              if (onboardingBanner) {
                onboardingBanner.style.display = 'none';
              }
            }
            try{
              const goSettings = function(){
                var settingsCard = document.getElementById('settingsCard');
                var placeInput = document.getElementById('googlePlaceId');
                var hint = document.getElementById('placeIdHint');
                if (settingsCard) settingsCard.scrollIntoView({ behavior:'smooth', block:'center' });
                if (hint) hint.style.display = 'flex';
                if (placeInput){
                  var prev = placeInput.style.boxShadow;
                  placeInput.style.boxShadow = '0 0 0 4px rgba(16,185,129,.35)';
                  setTimeout(function(){ placeInput.style.boxShadow = prev; placeInput.focus(); }, 800);
                }
              };
              var ob1 = document.getElementById('ob-placeid');
              if (ob1) ob1.addEventListener('click', goSettings);
            }catch(_){ }
          }catch(_){ }
        })();

        const sqBtn = document.getElementById('btnSquareConnect');
        if (sqBtn){
          sqBtn.addEventListener('click', function(){
            try{ sqBtn.disabled = true; sqBtn.textContent = 'Connecting…'; }catch(_){ }
            // Simplest, most reliable: server sets state and redirects
            window.location.href = '/auth/pos/square/connect';
          });
        }
        // Simple function that will actually work
        window.scrollToReviewKit = function() {
          console.log('[SCROLL-TO-REVIEW] Function called!');
          alert('Button clicked! Scrolling to Review Collection Kit...');
          
          var reviewKitCard = document.getElementById('reviewKitCard');
          console.log('[SCROLL-TO-REVIEW] Review Kit card element:', reviewKitCard);
          
          if (!reviewKitCard) {
            console.log('[SCROLL-TO-REVIEW] Review Kit card not found!');
            alert('Review Collection Kit section not found!');
            return;
          }
          
          console.log('[SCROLL-TO-REVIEW] Scrolling to Review Collection Kit...');
          reviewKitCard.scrollIntoView({ behavior:'smooth', block:'center' });
          
          // After a short delay, apply highlight animation
          setTimeout(function(){
            console.log('[SCROLL-TO-REVIEW] Adding highlight class');
            reviewKitCard.classList.add('is-highlighted');
            setTimeout(function(){ 
              console.log('[SCROLL-TO-REVIEW] Removing highlight class');
              reviewKitCard.classList.remove('is-highlighted'); 
            }, 2500);
          }, 450);
        };

        // Handle both first request buttons (now with unique IDs)
        // Wrap in DOMContentLoaded to ensure buttons are rendered first
        document.addEventListener('DOMContentLoaded', function() {
          console.log('[FIRST-REQUEST] DOM loaded, looking for buttons...');
          
          // Look for both button types
          var staticButton = document.getElementById('btnFirstRequestStatic');
          var dynamicButton = document.getElementById('btnFirstRequestDynamic');
          
          console.log('[FIRST-REQUEST] Static button found:', !!staticButton);
          console.log('[FIRST-REQUEST] Dynamic button found:', !!dynamicButton);
          
          // Function to add click handler
          function addClickHandler(button, buttonType) {
            if (button) {
              console.log('[FIRST-REQUEST] Adding click handler to', buttonType, 'button');
              button.addEventListener('click', function(){
                console.log('[FIRST-REQUEST]', buttonType, 'button clicked!');
                
                var reviewKitCard = document.getElementById('reviewKitCard');
                console.log('[FIRST-REQUEST] Review Kit card element:', reviewKitCard);
                
                if (!reviewKitCard) {
                  console.log('[FIRST-REQUEST] Review Kit card not found!');
                  return;
                }
                
                console.log('[FIRST-REQUEST] Scrolling to Review Collection Kit...');
                reviewKitCard.scrollIntoView({ behavior:'smooth', block:'center' });
                
                // After a short delay, apply highlight animation
                setTimeout(function(){
                  console.log('[FIRST-REQUEST] Adding highlight class');
                  reviewKitCard.classList.add('is-highlighted');
                  setTimeout(function(){ 
                    console.log('[FIRST-REQUEST] Removing highlight class');
                    reviewKitCard.classList.remove('is-highlighted'); 
                  }, 2500);
                }, 450);
              });
            }
          }
          
          // Add handlers to both buttons
          addClickHandler(staticButton, 'Static');
          addClickHandler(dynamicButton, 'Dynamic');
          
          if (!staticButton && !dynamicButton) {
            console.log('[FIRST-REQUEST] No buttons found!');
          } else {
            console.log('[FIRST-REQUEST] Button handlers set up successfully');
          }
        });

        // Disconnect Square
        const sqDisc = document.getElementById('btnSquareDisconnect');
        if (sqDisc){
          sqDisc.addEventListener('click', async function(){
            try{
              sqDisc.disabled = true; sqDisc.textContent = 'Disconnecting…';
              const resp = await fetch('/auth/pos/square/disconnect', {
                method:'POST',
                headers:{ 'X-Requested-With':'XMLHttpRequest', 'Content-Type':'application/x-www-form-urlencoded' },
                body: '_csrf=<%= (typeof csrfToken !== 'undefined' ? csrfToken : '') %>',
                credentials:'same-origin'
              });
              if (resp.ok) {
                // Reflect in UI immediately
                const s = document.getElementById('posStatus');
                const c = document.getElementById('btnSquareConnect');
                const d = document.getElementById('btnSquareDisconnect');
                if (s) s.style.display = 'none';
                if (c) c.style.display = '';
                if (d) d.style.display = 'none';
                // Also re-check server status
                await refreshPosStatus();
                return;
              }
            } catch(_) { }
            sqDisc.disabled = false; sqDisc.textContent = 'Disconnect';
            alert('Could not disconnect. Please try again.');
          });
        }

        if (!upgradeBtn) return;
        // Backfill + daily sync actions
        try{
          var bfBtn = document.getElementById('btnBackfill');
          var bfDays = document.getElementById('bfDays');
          var sdBtn = document.getElementById('btnSyncDaily');
          async function postForm(url, params){
            const body = new URLSearchParams(params||{}).toString();
            const resp = await fetch(url, { method:'POST', headers:{ 'X-Requested-With':'XMLHttpRequest', 'Content-Type':'application/x-www-form-urlencoded' }, body, credentials:'same-origin' });
            return resp.json().catch(()=>({}));
          }
          if (bfBtn){
            bfBtn.addEventListener('click', async function(){
              try{ 
                bfBtn.disabled = true; 
                bfBtn.textContent = 'Backfilling…'; 
              }catch(_){ }
              
              try {
                const days = Math.max(1, Math.min(90, parseInt((bfDays && bfDays.value) || '30', 10)));
                const res = await postForm('/integrations/square/backfill?days=' + days, {});
                if (res && res.ok) {
                  alert(`Backfill complete. Scanned ${res.scanned}, processed ${res.processed}.`);
                } else {
                  alert('Backfill finished.');
                }
              } catch (error) {
                console.error('Backfill error:', error);
                alert('Backfill failed. Please try again.');
              } finally {
                // Always reset button state
                try {
                  bfBtn.disabled = false;
                  bfBtn.textContent = 'Run Backfill';
                } catch(_) {}
              }
            });
          }
          if (sdBtn){
            sdBtn.addEventListener('click', async function(){
              try{ 
                sdBtn.disabled = true; 
                sdBtn.textContent = 'Syncing…'; 
              }catch(_){ }
              
              try {
                const res = await postForm('/integrations/square/sync-daily', {});
                if (res && res.ok) {
                  alert(`Daily sync complete. Scanned ${res.scanned}, processed ${res.processed}.`);
                } else {
                  alert('Daily sync finished.');
                }
              } catch (error) {
                console.error('Daily sync error:', error);
                alert('Daily sync failed. Please try again.');
              } finally {
                // Always reset button state
                try {
                  sdBtn.disabled = false;
                  sdBtn.textContent = 'Run Daily Sync';
                } catch(_) {}
              }
            });
          }
        }catch(_){ }

        // Stop wiring below if no upgrade button
        var publishableKey = '<%= process.env.STRIPE_PUBLISHABLE_KEY || "" %>';
        var stripe = (window.Stripe && publishableKey) ? Stripe(publishableKey) : null;
        upgradeBtn.addEventListener('click', async function(){
          upgradeBtn.disabled = true; upgradeBtn.textContent = 'Redirecting...';
          try {
            const resp = await fetch('/create-checkout-session', {
              method: 'POST',
              headers: { 'X-Requested-With': 'XMLHttpRequest', 'Content-Type': 'application/x-www-form-urlencoded' },
              body: '_csrf=<%= (typeof csrfToken !== 'undefined' ? csrfToken : '') %>',
              credentials: 'same-origin'
            });
            if (!resp.ok) { window.location.href = '/dashboard?e=' + encodeURIComponent('Checkout request failed'); return; }
            const data = await resp.json().catch(()=>null);
            if (data && data.id && stripe) {
              const { error } = await stripe.redirectToCheckout({ sessionId: data.id });
              if (!error) return;
            }
            if (data && data.url) { window.location = data.url; return; }
            if (resp.redirected && resp.url) { window.location = resp.url; return; }
            window.location.href = '/dashboard?e=' + encodeURIComponent('Checkout session not available');
          } catch (e) {
            console.error('stripe checkout error', e);
            window.location.href = '/dashboard?e=' + encodeURIComponent('Checkout failed');
          }
        });
      })();
    </script>
    <% if (process.env.GOOGLE_MAPS_API_KEY) { %>
    <script>
      (function(){
        try {
          var loaded = false;
          function initFinder(){
            if (loaded) return; loaded = true;
            var input = document.getElementById('placeSearch');
            var placeIdInput = document.getElementById('googlePlaceId');
            var result = document.getElementById('placeSearchResult');
            if (!input || !placeIdInput) return;
            // Use our server proxy for search to avoid leaving the page
            var debTimer = null;
            input.addEventListener('input', function(){
              clearTimeout(debTimer);
              var q = input.value.trim();
              if (!q){ if (result){ result.style.display='none'; result.innerHTML=''; } return; }
              debTimer = setTimeout(async function(){
                try{
                  const resp = await fetch('/api/places/search?q=' + encodeURIComponent(q));
                  const j = await resp.json();
                  const list = (j.places||[]);
                  if (!list.length){ result.style.display='none'; result.innerHTML=''; return; }
                  result.style.display='block';
                  result.innerHTML = list.map(p=>`<div class="placeres" data-id="${p.id}">${p.name} — <span style="color:#6B7280">${p.address||''}</span></div>`).join('');
                  Array.from(result.querySelectorAll('.placeres')).forEach(el=>{
                    el.addEventListener('click', function(){ placeIdInput.value = this.getAttribute('data-id'); result.style.display='none'; });
                  });
                }catch(_){ }
              }, 250);
            });
          }
          // Load Maps JS API if not present
          if (!(window.google && google.maps && google.maps.places)){
            var s = document.createElement('script');
            s.src = 'https://maps.googleapis.com/maps/api/js?key=<%= process.env.GOOGLE_MAPS_API_KEY %>&libraries=places&v=weekly';
            s.async = true; s.defer = true;
            s.onload = initFinder;
            document.head.appendChild(s);
          } else { initFinder(); }
        } catch(_) {}
      })();
    </script>
    <% } %>
    <script>
      (function(){
        try{
          var el = document.getElementById('distChart');
          if(!el) return;
          var counts = <%- JSON.stringify(analytics.counts || {1:0,2:0,3:0,4:0,5:0}) %>;
          var max = Math.max(1, counts[1]||0, counts[2]||0, counts[3]||0, counts[4]||0, counts[5]||0);
          function row(star){
            var val = counts[star] || 0;
            var pct = Math.round((val / max) * 100);
            var wrap = document.createElement('div');
            wrap.style.display = 'grid';
            wrap.style.gridTemplateColumns = '44px 1fr 48px';
            wrap.style.alignItems = 'center';
            wrap.style.gap = '8px';
            var label = document.createElement('div');
            label.textContent = star + '★';
            label.style.color = 'var(--muted)';
            label.style.fontWeight = '600';
            var barWrap = document.createElement('div');
            barWrap.style.background = 'var(--border)';
            barWrap.style.borderRadius = '999px';
            barWrap.style.overflow = 'hidden';
            var bar = document.createElement('div');
            bar.style.height = '8px';
            bar.style.width = pct + '%';
            bar.style.background = 'var(--accent)';
            barWrap.appendChild(bar);
            var value = document.createElement('div');
            value.textContent = val;
            value.style.textAlign = 'right';
            value.style.color = 'var(--muted)';
            wrap.appendChild(label); wrap.appendChild(barWrap); wrap.appendChild(value);
            el.appendChild(wrap);
          }
          [5,4,3,2,1].forEach(row);
        }catch(e){ console.error('dist chart error', e); }
      })();
    </script>

    <!-- CLEAN ROOM: Dashboard Pipeline Data Rendering -->
    <script>
    document.addEventListener('DOMContentLoaded', () => {
        console.log("[CLEANROOM-RENDER] Fetching pipeline data...");

        // Fetch data from the Clean Room API endpoint
        fetch('/api/dashboard/pipeline-data')
            .then(response => {
                if (!response.ok) {
                    return response.json().then(errData => {
                        throw new Error(`API Error: ${response.statusText}. Details: ${errData.details || 'N/A'}`);
                    });
                }
                return response.json();
            })
            .then(data => {
                console.log("[CLEANROOM-RENDER] Data received:", data);
                renderInsights(data.stats);
                renderCustomerFeedback(data.reviews);
            })
            .catch(error => {
                console.error("[CLEANROOM-RENDER] Fetch error:", error);
            });

        function renderInsights(stats) {
            if (!stats) return;
            
            // Update the existing KPI elements
            const totalFeedback = document.querySelector('.kpi:nth-child(1) .value');
            const averageRating = document.querySelector('.kpi:nth-child(2) .value');
            const fiveStarConversions = document.querySelector('.kpi:nth-child(3) .value');
            
            if (totalFeedback) totalFeedback.textContent = stats.totalFeedback || 0;
            if (averageRating) averageRating.textContent = stats.averageRating || '0.00';
            if (fiveStarConversions) fiveStarConversions.textContent = stats.fiveStarConversions || 0;
            
            console.log("[CLEANROOM-RENDER] Insights updated:", stats);
        }

        function renderCustomerFeedback(reviews) {
            const container = document.querySelector('.table-wrap tbody');
            if (!container) return;
            
            if (!reviews || reviews.length === 0) {
                container.innerHTML = `
                    <tr>
                        <td colspan="6" style="text-align:center; padding:32px 16px;">
                            <div style="display:flex; flex-direction:column; align-items:center; gap:14px; color: var(--muted)">
                                <svg width="88" height="88" viewBox="0 0 88 88" fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                                    <rect x="7" y="18" width="74" height="50" rx="8" stroke="#E5E7EB" stroke-width="2"/>
                                    <rect x="16" y="28" width="56" height="6" rx="3" fill="#E5E7EB"/>
                                    <rect x="16" y="40" width="42" height="6" rx="3" fill="#E5E7EB"/>
                                    <circle cx="70" cy="43" r="3" fill="#E5E7EB"/>
                                </svg>
                                <div>Your customer feedback will appear here.</div>
                                <button id="btnFirstRequestDynamic" type="button" class="btn-primary">Send Your First Request</button>
                            </div>
                        </td>
                    </tr>
                `;
                return;
            }

            // Render the list/table if reviews exist
            let html = '';
            reviews.forEach(review => {
                const date = new Date(review.createdAt).toLocaleDateString();
                const name = review.customerName || 'N/A';
                const email = review.customerEmail || 'N/A';
                const phone = review.customerPhone || 'N/A';
                const comment = review.comment ? review.comment.substring(0, 150) : 'N/A';
                html += `
                    <tr>
                        <td><span class="rating-star">${review.rating} ★</span></td>
                        <td>${date}</td>
                        <td>${name}</td>
                        <td>${email}</td>
                        <td>${phone}</td>
                        <td>${comment}</td>
                    </tr>
                `;
            });
            
            // Update table headers to include all columns
            const thead = container.parentElement.querySelector('thead tr');
            if (thead && thead.children.length === 2) {
                const dateHeader = document.createElement('th');
                dateHeader.textContent = 'Date';
                thead.appendChild(dateHeader);
                
                const nameHeader = document.createElement('th');
                nameHeader.textContent = 'Name';
                thead.appendChild(nameHeader);
                
                const emailHeader = document.createElement('th');
                emailHeader.textContent = 'Email';
                thead.appendChild(emailHeader);
                
                const phoneHeader = document.createElement('th');
                phoneHeader.textContent = 'Phone';
                thead.appendChild(phoneHeader);
                
                const commentHeader = document.createElement('th');
                commentHeader.textContent = 'Comment';
                thead.appendChild(commentHeader);
            }
            
            container.innerHTML = html;
            // Update count badge
            try{
              const countSpan = document.getElementById('feedbackCount');
              if (countSpan) countSpan.textContent = `(${reviews.length})`;
            }catch(_){ }
            console.log(`[CLEANROOM-RENDER] Customer feedback updated: ${reviews.length} reviews`);
        }
    });
    </script>
    
    <!-- Timezone conversion script for Recent Activity -->
    <script>
        // Simple timezone conversion - run once when page loads
        document.addEventListener('DOMContentLoaded', function() {
            const timeElements = document.querySelectorAll('.event-time');
            timeElements.forEach(element => {
                const timestamp = element.getAttribute('data-timestamp');
                if (timestamp) {
                    try {
                        const date = new Date(timestamp);
                        if (!isNaN(date.getTime())) {
                            element.textContent = date.toLocaleString();
                        } else {
                            element.textContent = 'Invalid date';
                        }
                    } catch (error) {
                        element.textContent = 'Error';
                    }
                }
            });
            
            // New automation form handling with AJAX
            console.log('[AUTOMATION-DEBUG] DOM loaded, looking for elements...');
            console.log('[AUTOMATION-DEBUG] Page loaded at:', new Date().toISOString());
            const saveAutomationBtn = document.getElementById('saveAutomation');
            const automationStatus = document.getElementById('automationStatus');
            
            console.log('[AUTOMATION-DEBUG] saveAutomationBtn found:', !!saveAutomationBtn);
            console.log('[AUTOMATION-DEBUG] automationStatus found:', !!automationStatus);
            
            if (saveAutomationBtn) {
                console.log('[AUTOMATION-DEBUG] Adding click listener to save button');
                saveAutomationBtn.addEventListener('click', async function() {
                    console.log('[AUTOMATION-DEBUG] Save button clicked!');
                    try {
                        // Get form values
                        const autoSendElement = document.getElementById('autoSend');
                        const delayMinutesElement = document.getElementById('delayMinutes');
                        const channelElement = document.getElementById('channel');
                        
                        console.log('[AUTOMATION-DEBUG] Form elements found:', {
                            autoSend: !!autoSendElement,
                            delayMinutes: !!delayMinutesElement,
                            channel: !!channelElement
                        });
                        
                        const autoSend = autoSendElement ? autoSendElement.checked : false;
                        const delayMinutes = delayMinutesElement ? parseInt(delayMinutesElement.value) || 0 : 0;
                        const channel = channelElement ? channelElement.value : 'email';
                        
                        console.log('[AUTOMATION-DEBUG] Form values:', { autoSend, delayMinutes, channel });
                        console.log('[AUTOMATION-DEBUG] Raw form values:', {
                            autoSendRaw: autoSendElement ? autoSendElement.checked : 'ELEMENT_NOT_FOUND',
                            delayMinutesRaw: delayMinutesElement ? delayMinutesElement.value : 'ELEMENT_NOT_FOUND',
                            channelRaw: channelElement ? channelElement.value : 'ELEMENT_NOT_FOUND'
                        });
                        
                        // Validate
                        if (delayMinutes < 0) {
                            alert('Please enter a valid delay (0 or positive number)');
                            return;
                        }
                        
                        // Show loading state
                        saveAutomationBtn.disabled = true;
                        saveAutomationBtn.textContent = 'Saving...';
                        automationStatus.style.display = 'block';
                        automationStatus.innerHTML = '<span style="color: #059669;">Saving automation settings...</span>';
                        
                        // Send AJAX request
                        console.log('[AUTOMATION-DEBUG] Sending fetch request to /api/automation/save');
                        const response = await fetch('/api/automation/save', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-Requested-With': 'XMLHttpRequest'
                            },
                            body: JSON.stringify({
                                autoSend,
                                delayMinutes,
                                channel
                            }),
                            credentials: 'same-origin'
                        });
                        
                        console.log('[AUTOMATION-DEBUG] Response received:', response.status, response.statusText);
                        
                        if (response.ok) {
                            automationStatus.innerHTML = '<span style="color: #059669;">✅ Automation settings saved successfully!</span>';
                            setTimeout(() => {
                                automationStatus.style.display = 'none';
                            }, 3000);
                        } else {
                            const errorData = await response.json().catch(() => ({}));
                            throw new Error(errorData.error || 'Failed to save settings');
                        }
                        
                    } catch (error) {
                        console.error('Save automation error:', error);
                        automationStatus.innerHTML = `<span style="color: #DC2626;">❌ Error: ${error.message}</span>`;
                    } finally {
                        // Reset button state
                        saveAutomationBtn.disabled = false;
                        saveAutomationBtn.textContent = 'Save Automation';
                    }
                });
            }
        });
    </script>
</body>
</html>

